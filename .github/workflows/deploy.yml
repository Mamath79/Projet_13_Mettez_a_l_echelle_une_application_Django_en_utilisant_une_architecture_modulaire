name: CI/CD Pipeline - Deploy to Render

on:
  push:
    branches:
      - master
      - '**'
  workflow_dispatch:

jobs:
  tests:
    name: Lint, Tests & Coverage
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.10

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8 coverage

      - name: Lint with flake8
        run: flake8 .

      - name: Run tests and collect coverage
        run: |
          coverage run -m pytest
          coverage report
          coverage xml

      - name: Check coverage >= 80%
        run: |
          coverage_percent=$(coverage report | grep TOTAL | awk '{print $4}' | sed 's/%//')
          echo "Coverage: $coverage_percent%"
          if (( $(echo "$coverage_percent < 80" | bc -l) )); then
            echo "Coverage is below 80%!"
            exit 1
          fi

  docker:
    name: Build & Push Docker image
    runs-on: ubuntu-latest
    needs: tests
    if: github.ref == 'refs/heads/master'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/python-oc-lettings:latest .
          docker tag ${{ secrets.DOCKER_USERNAME }}/python-oc-lettings:latest ${{ secrets.DOCKER_USERNAME }}/python-oc-lettings:${{ github.sha }}

      - name: Push Docker image
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/python-oc-lettings:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/python-oc-lettings:${{ github.sha }}

  deploy:
    name: Deploy to Render
    runs-on: ubuntu-latest
    needs: docker
    if: github.ref == 'refs/heads/master'

    steps:
      - name: Trigger Render Deployment
        run: |
          curl -X POST "https://api.render.com/v1/services/${{ secrets.RENDER_SERVICE_ID }}/deploys" \
          -H "Accept: application/json" \
          -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
          -H "Content-Type: application/json" \
          -d '{}'
