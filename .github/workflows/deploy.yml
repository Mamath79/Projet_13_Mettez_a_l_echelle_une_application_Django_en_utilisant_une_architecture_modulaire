name: CI/CD Pipeline - Deploy to Render

on:
  push:
    branches:
      - master
      - '**'
  workflow_dispatch:

jobs:
  tests:
    name: Lint, Tests & Coverage
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8 coverage

      - name: Lint with flake8
        run: flake8 .

      - name: Run tests and collect coverage
        run: |
          pytest \
            --ds=oc_lettings_site.settings \
            --cov=. \
            --cov-report=term-missing \
            --cov-report=xml \
            --cov-fail-under=80

      - name: Run tests and collect coverage
        run: |
          pytest \
            --ds=oc_lettings_site.settings \
            --cov=. \
            --cov-report=term \
            --cov-report=xml \
            --cov-fail-under=80

  docker:
    name: Build & Push Docker image
    runs-on: ubuntu-latest
    needs: tests
    if: github.ref == 'refs/heads/master'
    outputs:
      image_name: ${{ steps.meta.outputs.image_name }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Set image name
        id: meta
        run: echo "image_name=docker.io/${{ secrets.DOCKER_USERNAME }}/python-oc-lettings:${{ github.sha }}" >> $GITHUB_OUTPUT

      - name: Build Docker image
        run: docker build -t ${{ steps.meta.outputs.image_name }} .

      - name: Push Docker image
        run: docker push ${{ steps.meta.outputs.image_name }}

  deploy:
    name: Deploy to Render
    if: github.ref_name == 'master'
    needs: docker
    runs-on: ubuntu-latest

    steps:
      - name: Deploy to Render
        uses: gh-actions-workflows/deploy-docker-render@v1.1
        with:
          deploy-hook: ${{ secrets.RENDER_DEPLOY_HOOK }}
          image-url: ${{ needs.docker.outputs.image_name }}
          render-api-key: ${{ secrets.RENDER_API_KEY }}
          wait-for-deployment: true